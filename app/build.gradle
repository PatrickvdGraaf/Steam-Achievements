apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    def STRING = 'String'
    def API_URL = 'API_URL'
    def DB_NAME = 'DB_NAME'
    def STEAM_API_KEY = 'STEAM_API_KEY'
    def TEST_USER_ID = 'TEST_USER_ID'

    androidExtensions {
        experimental = true
    }

    buildToolsVersion '28.0.3'

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            aaptOptions.cruncherEnabled = false
            debuggable true
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileSdkVersion 29

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.crepetete.steamachievements"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "0.0.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        /* Open Source API for steam: https://steamcommunity.com/dev. */
        buildConfigField STRING, API_URL, '"https://api.steampowered.com"'
        buildConfigField STRING, DB_NAME, '"players.db"'

        /* Define the following values in your local.properties for safety, or declare here in the empty defaultValue param. */
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        def steam_api_key = properties.getProperty("steam_api_key", "")
        def test_user_id = properties.getProperty("test_user_id", "")

        /* An API key can be obtained from https://steamcommunity.com/dev/apikey. */
        buildConfigField STRING, STEAM_API_KEY, steam_api_key

        /* It's recommended to use your own steam ID, which can be found in your profile URL,
         or can be found with tools like https://steamidfinder.com. */
        buildConfigField STRING, TEST_USER_ID, test_user_id
    }

    // Specifies one flavor dimension.
    flavorDimensions "version"
    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }

    packagingOptions {
        pickFirst 'META-INF/core_release.kotlin_module'
    }

    productFlavors {
        // When building a variant that uses this flavor, the following configurations
        // override those in the defaultConfig block.
        dev {
            applicationIdSuffix '.dev'
            versionNameSuffix "-dev"

            // Only use this flag on builds you don't proguard or upload to beta-by-crashlytics
            ext.alwaysUpdateBuildId = false

            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"

            // The following configuration limits the "dev" flavor to using
            // English string resources and xxhdpi screen-density resources.
            resConfigs "en", "xxhdpi"
        }

        prod {
            // If you've configured the defaultConfig block for the release version of
            // your app, you can leave this block empty and Gradle uses configurations in
            // the defaultConfig block instead. You still need to create this flavor.
            // Otherwise, all variants use the "dev" flavor configurations.

            dimension "version"
        }
    }



    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
}

dependencies {
    def appcompat_version = '1.1.0'
    def cardview_version = '1.0.0'
    def crashlytics_version = '2.10.1'
    def coil_version = '0.8.0'
    def coroutines_version = '1.3.2'
    def constraint_layout_version = '1.1.3'
    def dagger_version = '2.25.2'
    def firebase_core_version = '17.2.1'
    def firebase_pref_version = '19.0.1'
    def fragment_version = '1.2.0-rc02'
    def graphview_version = '4.2.2'
    def legacy_support_version = '1.0.0'
    def lifecycle_version = '2.2.0-rc02'
    def material_version = '1.0.0'
    def okhttp_version = '4.2.0'
    def palette_version = '1.0.0'
    def recyclerview_version = '1.0.0'
    def retrofit_version = '2.6.0'
    def room_version = '2.2.1'
    def searchbar_version = '1.3.0'
    def timber_version = '4.7.1'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Android
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.cardview:cardview:$cardview_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_version"
    implementation "androidx.palette:palette:$palette_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    // Coil Image Loading
    implementation "io.coil-kt:coil:$coil_version"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // Firebase
    implementation "com.google.firebase:firebase-core:$firebase_core_version"
    implementation "com.google.firebase:firebase-perf:$firebase_pref_version"
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlytics_version"

    // Graph Library; http://www.android-graphview.org/download-getting-started/
    implementation "com.jjoe64:graphview:$graphview_version"

    // Material Components
    implementation "com.google.android.material:material:$material_version"

    // Timber Logging
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version" // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"// liveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version" // ViewModelScope

    // Search Bar Animation; https://github.com/UdiOshi85/libSearchToolbar
    implementation "com.github.udioshi85:libSearchToolbar:$searchbar_version"

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.8.1'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.appcompat:appcompat:1.1.0'
    androidTestImplementation 'androidx.recyclerview:recyclerview:1.0.0'
    androidTestImplementation 'androidx.cardview:cardview:1.0.0'
    androidTestImplementation 'com.google.android.material:material:1.0.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'org.mockito:mockito-core:2.22.0'
    androidTestImplementation 'org.mockito:mockito-android:2.22.0'
}

apply from: '../ktlint.gradle'
check.dependsOn ktlint

apply plugin: 'com.google.gms.google-services'